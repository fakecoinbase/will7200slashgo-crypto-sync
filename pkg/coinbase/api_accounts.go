/*
 * CoinBase API
 *
 * Coinbase provides a simple and powerful REST API to integrate bitcoin, bitcoin cash, litecoin and ethereum payments into your business or application.  This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our API documentation.
 *
 * API version: 2019-11-15
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package coinbase

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AccountsApiService AccountsApi service
type AccountsApiService service

type apiGetAccountRequest struct {
	ctx               _context.Context
	apiService        *AccountsApiService
	accountId         string
	cBACCESSSIGN      *string
	cBACCESSTIMESTAMP *int32
}

func (r apiGetAccountRequest) CBACCESSSIGN(cBACCESSSIGN string) apiGetAccountRequest {
	r.cBACCESSSIGN = &cBACCESSSIGN
	return r
}

func (r apiGetAccountRequest) CBACCESSTIMESTAMP(cBACCESSTIMESTAMP int32) apiGetAccountRequest {
	r.cBACCESSTIMESTAMP = &cBACCESSTIMESTAMP
	return r
}

/*
GetAccount Retrieve Account
Show current user’s account. To access the primary account for a given currency, a currency string (BTC or ETH) can be used instead of the account id in the URL.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountId The id of the account
@return apiGetAccountRequest
*/
func (a *AccountsApiService) GetAccount(ctx _context.Context, accountId string) apiGetAccountRequest {
	return apiGetAccountRequest{
		apiService: a,
		ctx:        ctx,
		accountId:  accountId,
	}
}

/*
Execute executes the request
 @return Account
*/
func (r apiGetAccountRequest) Execute() (Account, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Account
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.GetAccount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", _neturl.PathEscape(parameterToString(r.accountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.cBACCESSSIGN != nil {
		localVarHeaderParams["CB-ACCESS-SIGN"] = parameterToString(*r.cBACCESSSIGN, "")
	} else {
		localVarHeaderParams["CB-ACCESS-SIGN"] = "auto"
	}

	if r.cBACCESSTIMESTAMP != nil {
		localVarHeaderParams["CB-ACCESS-TIMESTAMP"] = parameterToString(*r.cBACCESSTIMESTAMP, "")
	} else {
		localVarHeaderParams["CB-ACCESS-TIMESTAMP"] = "auto"
	}

	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["ApiKeyAuth"]; ok {
				var key string
				key = auth.Key
				localVarHeaderParams["CB-ACCESS-KEY"] = key
			}
		}
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type apiListAccountsRequest struct {
	ctx               _context.Context
	apiService        *AccountsApiService
	cBACCESSSIGN      *string
	cBACCESSTIMESTAMP *int32
}

func (r apiListAccountsRequest) CBACCESSSIGN(cBACCESSSIGN string) apiListAccountsRequest {
	r.cBACCESSSIGN = &cBACCESSSIGN
	return r
}

func (r apiListAccountsRequest) CBACCESSTIMESTAMP(cBACCESSTIMESTAMP int32) apiListAccountsRequest {
	r.cBACCESSTIMESTAMP = &cBACCESSTIMESTAMP
	return r
}

/*
ListAccounts List Accounts
Lists current user’s accounts to which the authentication method has access to.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiListAccountsRequest
*/
func (a *AccountsApiService) ListAccounts(ctx _context.Context) apiListAccountsRequest {
	return apiListAccountsRequest{
		apiService: a,
		ctx:        ctx,
	}
}

/*
Execute executes the request
 @return InlineResponse200
*/
func (r apiListAccountsRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "AccountsApiService.ListAccounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.cBACCESSSIGN != nil {
		localVarHeaderParams["CB-ACCESS-SIGN"] = parameterToString(*r.cBACCESSSIGN, "")
	} else {
		localVarHeaderParams["CB-ACCESS-SIGN"] = "auto"
	}

	if r.cBACCESSTIMESTAMP != nil {
		localVarHeaderParams["CB-ACCESS-TIMESTAMP"] = parameterToString(*r.cBACCESSTIMESTAMP, "")
	} else {
		localVarHeaderParams["CB-ACCESS-TIMESTAMP"] = "auto"
	}

	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["ApiKeyAuth"]; ok {
				var key string
				key = auth.Key
				localVarHeaderParams["CB-ACCESS-KEY"] = key
			}
		}
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
